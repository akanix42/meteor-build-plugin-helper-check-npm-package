{"version":3,"sources":["check-npm-package.js"],"names":["checkNpmPackage","packageWithVersion","requestor","split","packageName","packageVersion","verifyPackageExists","checkNpmVersion","packagePath","basePath","doesPackageExist","existsSync","error","red","bold","name","actualVersion","currentVersion","require","version","satisfies","warn","yellow","e","message"],"mappings":";;;;;;;;kBAMwBA,e;;AANxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,eAAT,CAAyBC,kBAAzB,EAA6CC,SAA7C,EAAwD;AAAA,8BAC7BD,mBAAmBE,KAAnB,CAAyB,GAAzB,CAD6B;AAAA;AAAA,MAC7DC,WAD6D;AAAA,MAChDC,cADgD;;AAGrE,MAAI,CAACC,oBAAoBF,WAApB,EAAiCC,cAAjC,EAAiDH,SAAjD,CAAL,EAAkE;AAChE,WAAO,KAAP;AACD;;AAED,SAAOK,gBAAgBH,WAAhB,EAA6BC,cAA7B,EAA6CH,SAA7C,CAAP;AACD;;AAED,SAASI,mBAAT,CAA6BF,WAA7B,EAA0CC,cAA1C,EAA0DH,SAA1D,EAAqE;AACnE,MAAMM,cAAe,GAAE,6CAAYC,QAAS,iBAAgBL,WAAY,EAAxE;AACA,MAAMM,mBAAmB,aAAGC,UAAH,CAAcH,WAAd,CAAzB;AACA,MAAI,CAACE,gBAAL,EAAuB;AACrB,6BAAOE,KAAP,CAAa,iBAAOC,GAAP,CAAWC,IAAX,CAAiB,+BAA8BV,WAAY,IAAGC,cAAe,kBAAiBH,SAAU,iHAAgHE,WAAY,IAAGC,cAAe,mCAAkCD,WAAY,IAAGC,cAAe,EAAtT,CAAb;AACD;;AAED,SAAOK,gBAAP;AACD;;AAED,SAASH,eAAT,CAAyBQ,IAAzB,EAA+BC,aAA/B,EAA8Cd,SAA9C,EAAyD;AACvD,MAAI;AACF,QAAMe,iBAAiBC,QAAS,GAAEH,IAAK,eAAhB,EAAgCI,OAAvD;AACA,QAAI,iBAAOC,SAAP,CAAiBH,cAAjB,EAAiCD,aAAjC,CAAJ,EAAqD;AACnD,aAAO,IAAP;AACD,KAFD,MAEO;AACL,+BAAOK,IAAP,CAAY,iBAAOC,MAAP,CAAcR,IAAd,CAAoB,iCAAgCC,IAAK,0BAAyBE,cAAe,iBAAgBD,aAAc,oBAAmBd,SAAU,GAA5J,CAAZ;AACA,aAAO,IAAP;AACD;AACF,GARD,CAQE,OAAOqB,CAAP,EAAU;AACV,6BAAOX,KAAP,CAAa,iBAAOC,GAAP,CAAWC,IAAX,CAAiB,2BAA0BC,IAAK,IAAGC,aAAc,kBAAiBd,SAAU,MAAKqB,EAAEC,OAAQ,EAA3G,CAAb;AACA,WAAO,KAAP;AACD;AACF","file":"check-npm-package.js","sourcesContent":["import fs from 'fs';\r\nimport semver from 'semver';\r\nimport colors from 'colors';\r\nimport logger from 'hookable-logger';\r\nimport PathHelpers from 'meteor-build-plugin-helper-path-helpers';\r\n\r\nexport default function checkNpmPackage(packageWithVersion, requestor) {\r\n  const [ packageName, packageVersion ] = packageWithVersion.split('@');\r\n\r\n  if (!verifyPackageExists(packageName, packageVersion, requestor)) {\r\n    return false;\r\n  }\r\n\r\n  return checkNpmVersion(packageName, packageVersion, requestor);\r\n}\r\n\r\nfunction verifyPackageExists(packageName, packageVersion, requestor) {\r\n  const packagePath = `${PathHelpers.basePath}/node_modules/${packageName}`;\r\n  const doesPackageExist = fs.existsSync(packagePath);\r\n  if (!doesPackageExist) {\r\n    logger.error(colors.red.bold(`Error checking npm package: ${packageName}@${packageVersion} (requested by ${requestor}): package not found. Please ensure you have installed the package; here is the command:\\n meteor npm install ${packageName}@${packageVersion} --save-dev\\n or \\n meteor yarn ${packageName}@${packageVersion}`));\r\n  }\r\n\r\n  return doesPackageExist;\r\n}\r\n\r\nfunction checkNpmVersion(name, actualVersion, requestor) {\r\n  try {\r\n    const currentVersion = require(`${name}/package.json`).version;\r\n    if (semver.satisfies(currentVersion, actualVersion)) {\r\n      return true;\r\n    } else {\r\n      logger.warn(colors.yellow.bold(`WARNING: version mismatch for ${name}; installed version is ${currentVersion}, but version ${actualVersion} is requested by ${requestor})`));\r\n      return true;\r\n    }\r\n  } catch (e) {\r\n    logger.error(colors.red.bold(`Error checking package: ${name}@${actualVersion} (requested by ${requestor}): ${e.message}`));\r\n    return false;\r\n  }\r\n}\r\n\r\n"]}