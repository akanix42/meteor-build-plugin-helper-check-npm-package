{"version":3,"sources":["check-npm-package.js"],"names":["checkNpmPackage","VERSION_RESULT","SATISFIED","MISMATCH","MISSING","packageWithVersion","requestor","suppressLogs","split","packageName","packageVersion","verifyPackageExists","error","red","bold","versionCheck","checkNpmVersion","result","err","message","warn","yellow","currentVersion","packagePath","basePath","doesPackageExist","existsSync","name","actualVersion","require","version","satisfies"],"mappings":";;;;;;;;kBAWwBA,e;;AAXxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMC,iBAAe;AACnBC,aAAW,CADQ;AAEnBC,YAAU,CAFS;AAGnBC,WAAS;AAHU,CAArB;AAKe,SAASJ,eAAT,CAAyBK,kBAAzB,EAA6CC,SAA7C,EAA6E;AAAA,MAArBC,YAAqB,uEAAN,IAAM;;AAAA,8BAClDF,mBAAmBG,KAAnB,CAAyB,GAAzB,CADkD;AAAA;AAAA,MAClFC,WADkF;AAAA,MACrEC,cADqE;;AAG1F,MAAI,CAACC,oBAAoBF,WAApB,EAAiCC,cAAjC,EAAiDJ,SAAjD,CAAL,EAAkE;AAChE,QAAI,CAACC,YAAL,EACE,yBAAOK,KAAP,CAAa,iBAAOC,GAAP,CAAWC,IAAX,CAAiB,+BAA8BL,WAAY,IAAGC,cAAe,kBAAiBJ,SAAU,iHAAgHG,WAAY,IAAGC,cAAe,mCAAkCD,WAAY,IAAGC,cAAe,EAAtT,CAAb;AACF,WAAO,KAAP;AACD;;AAED,MAAMK,eAAeC,gBAAgBP,WAAhB,EAA6BC,cAA7B,EAA6CJ,SAA7C,CAArB;AACA,MAAIS,aAAaE,MAAb,KAAwBhB,eAAeG,OAA3C,EAAoD;AAClD,QAAI,CAACG,YAAL,EACE,yBAAOK,KAAP,CAAa,iBAAOC,GAAP,CAAWC,IAAX,CAAiB,2BAA0BL,WAAY,IAAGC,cAAe,kBAAiBJ,SAAU,MAAKS,aAAaG,GAAb,CAAiBC,OAAQ,EAAlI,CAAb;AACF,WAAO,KAAP;AACD;AACD,MAAIJ,aAAaE,MAAb,KAAwBhB,eAAeE,QAA3C,EAAqD;AACnD,QAAI,CAACI,YAAL,EACE,yBAAOa,IAAP,CAAY,iBAAOC,MAAP,CAAcP,IAAd,CAAoB,iCAAgCL,WAAY,0BAAyBM,aAAaO,cAAe,iBAAgBZ,cAAe,oBAAmBJ,SAAU,GAAjL,CAAZ;AACH;;AAED,SAAO,IAAP;AACD;;AAED,SAASK,mBAAT,CAA6BF,WAA7B,EAA0C;AACxC,MAAMc,cAAe,GAAE,6CAAYC,QAAS,iBAAgBf,WAAY,EAAxE;AACA,MAAMgB,mBAAmB,aAAGC,UAAH,CAAcH,WAAd,CAAzB;;AAEA,SAAOE,gBAAP;AACD;;AAED,SAAST,eAAT,CAAyBW,IAAzB,EAA+BC,aAA/B,EAA8CtB,SAA9C,EAAyD;AACvD,MAAI;AACF,QAAMgB,iBAAiBO,QAAS,GAAEF,IAAK,eAAhB,EAAgCG,OAAvD;AACA,QAAI,iBAAOC,SAAP,CAAiBT,cAAjB,EAAiCM,aAAjC,CAAJ,EAAqD;AACnD,aAAO,EAACX,QAAQhB,eAAeC,SAAxB,EAAP;AACD,KAFD,MAEO;AACL,aAAO,EAACe,QAAQhB,eAAeE,QAAxB,EAAkCmB,cAAlC,EAAP;AACD;AACF,GAPD,CAOE,OAAOJ,GAAP,EAAY;AACZ,WAAO,EAACD,QAAQhB,eAAeG,OAAxB,EAAiCc,GAAjC,EAAP;AACD;AACF","file":"check-npm-package.js","sourcesContent":["import fs from 'fs';\r\nimport semver from 'semver';\r\nimport colors from 'colors';\r\nimport logger from 'hookable-logger';\r\nimport PathHelpers from 'meteor-build-plugin-helper-path-helpers';\r\n\r\nconst VERSION_RESULT={\r\n  SATISFIED: 0,\r\n  MISMATCH: 1,\r\n  MISSING: 2\r\n}\r\nexport default function checkNpmPackage(packageWithVersion, requestor, suppressLogs = true) {\r\n  const [ packageName, packageVersion ] = packageWithVersion.split('@');\r\n\r\n  if (!verifyPackageExists(packageName, packageVersion, requestor)) {\r\n    if (!suppressLogs)\r\n      logger.error(colors.red.bold(`Error checking npm package: ${packageName}@${packageVersion} (requested by ${requestor}): package not found. Please ensure you have installed the package; here is the command:\\n meteor npm install ${packageName}@${packageVersion} --save-dev\\n or \\n meteor yarn ${packageName}@${packageVersion}`));\r\n    return false;\r\n  }\r\n\r\n  const versionCheck = checkNpmVersion(packageName, packageVersion, requestor);\r\n  if (versionCheck.result === VERSION_RESULT.MISSING) {\r\n    if (!suppressLogs)\r\n      logger.error(colors.red.bold(`Error checking package: ${packageName}@${packageVersion} (requested by ${requestor}): ${versionCheck.err.message}`));\r\n    return false;\r\n  }\r\n  if (versionCheck.result === VERSION_RESULT.MISMATCH) {\r\n    if (!suppressLogs)\r\n      logger.warn(colors.yellow.bold(`WARNING: version mismatch for ${packageName}; installed version is ${versionCheck.currentVersion}, but version ${packageVersion} is requested by ${requestor})`));\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction verifyPackageExists(packageName) {\r\n  const packagePath = `${PathHelpers.basePath}/node_modules/${packageName}`;\r\n  const doesPackageExist = fs.existsSync(packagePath);\r\n\r\n  return doesPackageExist;\r\n}\r\n\r\nfunction checkNpmVersion(name, actualVersion, requestor) {\r\n  try {\r\n    const currentVersion = require(`${name}/package.json`).version;\r\n    if (semver.satisfies(currentVersion, actualVersion)) {\r\n      return {result: VERSION_RESULT.SATISFIED};\r\n    } else {\r\n      return {result: VERSION_RESULT.MISMATCH, currentVersion};\r\n    }\r\n  } catch (err) {\r\n    return {result: VERSION_RESULT.MISSING, err};\r\n  }\r\n}\r\n\r\n"]}